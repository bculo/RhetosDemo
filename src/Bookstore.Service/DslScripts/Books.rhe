Module Bookstore
{
    Entity Book
    {
        ShortString Code 
        { 
            Unique; 
            Required; 
            AutoCode; 
        }

        ShortString Title { Required; }
        Integer NumberOfPages 
        { 
            DefaultValue 'item => 1';
            MaxValue 1001;
        }

        ItemFilter RemoveBooksWithZeroPages 'item => item.NumberOfPages > 0';

        ItemFilter ForeignAuthorXWithComments 'item =>
            item.Author.Name.StartsWith("C")
            && item.Extension_ForeignBook.ID == null
            && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() == 0';

        Reference Author Bookstore.Person;
    }

    Entity Person
    {
        ShortString Name;

        ComposableFilterBy RemoveUserThatContains '(query, repository, parameter) =>
        {
            if(string.IsNullOrEmpty(parameter.Name))
                return query;
            return query.Where(item => !item.Name.Trim().ToLower().Contains(parameter.Name.Trim()));
        }';

        ItemFilter PersonIsAdmin 'person => person.Name.Trim().ToLower() == "admin"';
        Lock PersonIsAdmin 'Name is equal to admin.';
    }

    Parameter RemoveUserThatContains 
    {
        ShortString Name;
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;
        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo;
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;
        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name 
        { 
            Unique; 
            Required;
        }

        DenyUserEdit;
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    //Example Browse
    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
    }

    //Example SqlQueryable 
    SqlQueryable BookInfo
    "
        SELECT
            b.ID,
            NumberOfComments = COUNT(c.ID)
        FROM
            Bookstore.Book b
            LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
        GROUP BY
            b.ID
    "
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    //Example External SQL
    SqlQueryable BookInfoExternal <SQL/BookInfoExternal.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    //Computed data in Browse
    Browse BookGridComputed Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
    }

    //Computed concept
    Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    //Assignment 1
    SqlQueryable BookTopicInfo
	"
		SELECT 
			B.ID,
			NumberOfItems = COUNT(BT.ID)
		FROM 
			[Bookstore].[Book] AS B
			LEFT JOIN [Bookstore].[BookTopic] AS BT ON BT.BookId = B.ID
		GROUP BY
			B.ID
	"
    {
	    Extends Bookstore.Book;
	    Integer NumberOfItems;

	    AutodetectSqlDependencies;
    }

    //Assignment 2
    Browse AssignmentBookstoreGrid Bookstore.Book
    {
        Take Title;
        Take 'Author.Name';
        Take NumberOfTopics 'Extension_BookTopicInfo.NumberOfItems';
    }

    //Hardcoded concept
    Hardcoded Genre
    {
        ShortString Label; // Short text displayed to user.
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }


    Action Insert5Books
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < 5; i++)
            {
                var newBook = new Bookstore.Book { Code = $"{i}+++", Title = "New book" };
                repository.Bookstore.Book.Insert(newBook);
            }
        }';

    Action InsertManyBooks
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < parameter.NumberOfBooks; i++)
            {
                var newBook = new Bookstore.Book { Code = $"{i}+++", Title = parameter.Title };
                repository.Bookstore.Book.Insert(newBook);
            }
        }'
    {
        Integer NumberOfBooks;
        ShortString Title;
    }

}